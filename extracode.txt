const code = `
    import React from "react";
import { render } from "react-dom";

//importing the test runner
import Test from "./Test";

//importing some code I want to test
import QuickSort from "./QuickSort";
import BubbleSort from "./BubbleSort";

const App = () => (
  <div style={{ fontFamily: "sans-serif" }}>
    <h3>✅ Running unit tests with Jest Test Compnent...</h3>
    <div>
      Simple Equality Tests...
      <Test input={1} output={1} name="numbers" />
      <Test input={"alice"} output={"alice"} name="strings" />
      <Test input={[1, 2]} output={[1, 2]} name="arrays" />
      <Test
        input={{ name: "alice", loc: "paris" }}
        output={{ name: "alice", loc: "paris" }}
        name="objects"
      />
    </div>
    <br />
    <div>
      Testing Bubble Sort...
      <Test input={BubbleSort([1])} output={[1]} name="empty array test" />
      <Test
        input={BubbleSort([1])}
        output={[1]}
        name="single element array test"
      />
      <Test
        input={BubbleSort([2, 1])}
        output={[1, 2]}
        name="two elements array test"
      />
      <Test
        input={BubbleSort([10, 5, 6, 2, 1])}
        output={[1, 2, 5, 6, 10]}
        name="many elements array test"
      />
    </div>
    <br />
    <div>
      Testing Quick Sort...
      <Test input={QuickSort([])} output={[]} name="empty array test" />
      <Test
        input={QuickSort([1])}
        output={[1]}
        name="single element array test"
      />
      <Test
        input={QuickSort([2, 1])}
        output={[1, 2]}
        name="two elements array test"
      />
      <Test
        input={QuickSort([10, 5, 6, 2, 1])}
        output={[1, 2, 5, 6, 10]}
        name="many elements array test"
      />
    </div>
  </div>
);

render(<App />, document.getElementById("root"));

    `;

  const testCode = `
    import React from "react";
import expect from "jest-matchers";

export default ({ input, output, name }) => {
  let status = "✅";
  try {
    expect(input).toEqual(output);
  } catch (AssertionError) {
    console.log(AssertionError);
    status = "❌";
  }
  return (
    <div>
      {status} {name}
    </div>
  );
};

    `;

  const quicksortCode = `
    export default array => {
        return quickSortRecursive(array, 0, array.length - 1);
      };
      
      const quickSortRecursive = (array, left, right) => {
        let index;
        if (array.length > 1) {
          index = partition(array, left, right);
          if (left < index - 1) {
            quickSortRecursive(array, left, index - 1);
          }
          if (index < right) {
            quickSortRecursive(array, index, right);
          }
        }
        return array;
      };
      
      const partition = (array, left, right) => {
        let mid = Math.floor((left + right) / 2);
        let pivot = array[mid];
        let il = left;
        let ir = right;
        while (il <= ir) {
          //while the boundaries dont collide
          while (array[il] < pivot) {
            //while values on left are less than pivot, keep going
            il++;
          }
          while (array[ir] > pivot) {
            //while value on right are great than pivot, keep going
            ir--;
          }
          if (il <= ir) {
            //swap the values that are incorrectly placed
            [array[il], array[ir]] = [array[ir], array[il]];
            il++;
            ir--;
          }
        }
        return il; //return the correct position of the pivot in the array
      };
      
    `;
  const bubblesortCode = `
    export default array => {
        let length = array.length;
        for (let i = 0; i < length; i++) {
          let swapped = false;
          for (let j = 0; j < length - 1 - i; j++) {
            if (array[j] > array[j + 1]) {
              [array[j], array[j + 1]] = [array[j + 1], array[j]];
              swapped = true;
            }
          }
          if (!swapped) {
            break;
          }
        }
        return array;
      };
      
    `;